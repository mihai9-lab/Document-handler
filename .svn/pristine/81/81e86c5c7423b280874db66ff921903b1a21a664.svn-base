package tree.model;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;

import javax.swing.tree.TreeNode;

import observer.interfaces.IOListener;
import observer.interfaces.IObserver;

public class Workspace implements TreeNode,IObserver,Serializable,ITreeNodeSerialization {

	transient private ArrayList<IOListener> listeners;
	
	private NewNodeNumberSet numbers;
	private ArrayList<Project> projects;
	private String name;
	
	File location;
	private boolean changed;
	
	public Workspace() {
		this.projects = new ArrayList<Project>();
		this.name = "Workspace";
		this.location = null;
		this.changed = true;
		this.numbers = new NewNodeNumberSet();
	}
	
	public void addProject() {

		int number = this.numbers.getNumber();
		String projectName= "New Project " + number;
		Project prj =new Project(this,projectName,number);
		projects.add(prj);
		registerChange();
		notifyObserver(this);
	}

	public void addProject(String projectName) {
		Project prj =new Project(this,projectName,0);
		projects.add(prj);
		registerChange();
		notifyObserver(this);
	}
	
	public void addProject(Project prj) {
		
		if(prj.toString()==null) {
			int number = this.numbers.getNumber();
			String projectName= "New Project " + number;
			prj.renameProject(projectName);
			prj.setNumber(number);
		}
		projects.add(prj);
		prj.setParentNode(this);
		registerChange();
		notifyObserver(this);
	}
	

	protected void removeProject(Project prj) {
		
		if(prj==null)
			return;
		if(projects.isEmpty())
			return;
		if(!projects.contains(prj))
			return;
		if(prj.getNewProjectNumber()!=0)
			this.numbers.giveBackNumber(prj.getNewProjectNumber());
		
		projects.remove(prj);
		registerChange();
		notifyObserver(this);
		
	}
	
	protected void returnNumber(int number) {
		this.numbers.giveBackNumber(number);
	}

	public void updateSelected(Project prj) {
		
		for(Project p:projects) {
			if(p!=prj) p.setSelected(false);
		}
		prj.setSelected(true);
		notifyObserver(this);
	}

	@Override
	public TreeNode getChildAt(int childIndex) {

		if(projects.isEmpty())
			return null;
		if(childIndex < 0)
			return null;
		if(projects.size() < childIndex)
			return null;

		return projects.get(childIndex);
	}

	@Override
	public int getChildCount() {
		return projects.size();
	}

	@Override
	public TreeNode getParent() {
		return null;
	}

	@Override
	public int getIndex(TreeNode node) {

		if(node instanceof Project)
			return projects.indexOf((Project)node);

		return -1;
	}

	@Override
	public boolean getAllowsChildren() {
		return true;
	}

	@Override
	public boolean isLeaf() {
		return false;
	}

	@Override
	public Enumeration<Project> children() {

		if(projects.isEmpty())
			return null;
		return Collections.enumeration(projects);
	}

	@Override
	public void addObserver(IOListener listener) {

		if(listener == null)
			return;
		if(listeners == null)
			listeners = new ArrayList<IOListener>();
		if(listeners.contains(listener))
			return;
		listeners.add(listener);

	}
	@Override
	public void removeObserver(IOListener listener) {

		if(listener == null)
			return;
		if(!listeners.contains(listener))
			return;
		listeners.remove(listener);

	}
	@Override
	public void notifyObserver(Object event) {
		if(event == null)
			return;
		registerChange();
		if(listeners == null)
			return;

		for(IOListener listener:listeners)
			listener.update(event);
	}
	@Override
	public String toString() {
		return this.name;
	}
	
	public void setChanged(boolean changed) {
		this.changed=changed;
	}
	
	public void registerChange() {
		this.changed=true;
	}
	
	private Object readResolve(){
		 listeners = new ArrayList<IOListener>();
		 return this;
	}
	@Override
	public void setLoaction(File f) {
		this.location=f;
	}
	@Override
	public File getLocation() {
		return this.location;
	}
	@Override
	public boolean isChanged() {
		return changed;
	}

}
