package tree.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;

import javax.swing.tree.TreeNode;

import observer.interfaces.IOListener;
import observer.interfaces.IObserver;

public class Project implements TreeNode,IObserver{

	private ArrayList<IOListener> listeners;
	
	private ArrayList<Document> documents;
	private String name;
	private Workspace parentNode;
	private boolean newProjectStatus;
	private boolean erased;
	private boolean selected;
	
	public Project(Workspace parentNode, String name,boolean status) {
		erased=false;
		selected=false;
		this.documents = new ArrayList<Document>();
		this.parentNode = parentNode;
		this.name = name;
		this.newProjectStatus = status;
		
	}
	
	public boolean getNewProjectStatus() {
		return newProjectStatus;
	}
	
	public void addDocument() {
		int newDocumentCount=0;
		
		for(Document p:documents) 
			if(p.getNewDocumentStatus())
				newDocumentCount++;
		newDocumentCount++;
		
		String documentName= "New Document " + newDocumentCount;
		Document doc = new Document(this,documentName,true);
		documents.add(doc);
		if(this.selected) doc.setClosed(false);
		notifyObserver(this);
	}
	public void addDocument(String documentName) {
		Document doc = new Document(this,documentName,false);
		documents.add(doc);
		if(this.selected) doc.setClosed(false);
		notifyObserver(this);
	}
	
	public void removeProject() {
		erased=true;
		parentNode.removeProject(this);
	}
	
	protected void removeDocument(Document doc) {
		if(doc==null)
			return;
		if(documents.isEmpty())
			return;
		
		if(documents.contains(doc)) {
			documents.remove(doc);
			notifyObserver(this);
		}

	}

	public void renameProject(String name) {
		this.name=name;
		this.newProjectStatus=false;
		notifyObserver(this);
	}
	
	public void select() {
		this.parentNode.updateSelected(this);
	}
	
	public void setSelected(boolean selected) {
		for(Document d:documents)
			d.setClosed(!selected);
		this.selected=selected;
	}
	
	public void closeAll() {
		for(Document d:documents)
			d.setClosed(true);
	}
	
	public boolean getSelected() {
		return selected;
	}
	
	@Override
	public TreeNode getChildAt(int childIndex) {
		
		if(documents.isEmpty())
			return null;
		if(childIndex < 0)
			return null;
		if(documents.size() < childIndex)
			return null;
		
		return documents.get(childIndex);
	}

	@Override
	public int getChildCount() {
		
		return documents.size();
	}

	@Override
	public TreeNode getParent() {
		
		return parentNode;
	}

	@Override
	public int getIndex(TreeNode node) {
		
		if(node instanceof Document)
			if(documents.contains(node))
				return documents.indexOf((Document)node);
		
		return -1;
	}

	@Override
	public boolean getAllowsChildren() {
		
		return true;
	}

	@Override
	public boolean isLeaf() {
		
		return false;
	}

	@Override
	public Enumeration<Document> children() {
		
		if(documents.isEmpty())
			return null;
		return Collections.enumeration(documents);
	}

	@Override
	public void addObserver(IOListener listener) {
		
		if(listener == null)
			return;
		if(listeners == null)
			listeners = new ArrayList<IOListener>();
		if(listeners.contains(listener))
			return;
		listeners.add(listener);
		
	}

	@Override
	public void removeObserver(IOListener listener) {
		
		if(listener == null)
			return;
		if(!listeners.contains(listener))
			return;
		listeners.remove(listener);
		
	}

	@Override
	public void notifyObserver(Object event) {
		
		if(event == null)
			return;
		if(listeners == null)
			return;
		
		for(IOListener listener:listeners) 
			listener.update(event);
		
	}
	
	@Override
	public String toString() {
		return this.name;
	}
	
	public boolean getErased() {
		return erased;
	}
}
