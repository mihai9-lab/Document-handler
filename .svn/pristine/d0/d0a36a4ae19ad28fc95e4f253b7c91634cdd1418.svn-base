package tree.model;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;

import javax.swing.tree.TreeNode;

import observer.interfaces.IOListener;
import observer.interfaces.IObserver;

public class Project implements TreeNode,IObserver,Serializable{

	transient private ArrayList<IOListener> listeners;

	private ArrayList<Document> documents;
	private String name;
	private Workspace parentNode;

	private boolean newProjectStatus;
	private int newDocumentCount=0;
	private int renamedNewDocumentCount=0;

	private boolean erased;
	private boolean selected;
	
	private boolean changed=true;
	private File projectFile;

	public Project(Workspace parentNode, String name,boolean status) {
		this.erased=false;
		this.selected=false;
		this.documents = new ArrayList<Document>();
		this.parentNode = parentNode;
		this.name = name;
		this.projectFile=null;
		this.changed=false;
		this.newProjectStatus = status;
		this.projectFile = null;
	}

	public void addDocument() {

		if(renamedNewDocumentCount==0) {
			newDocumentCount=1;
			renamedNewDocumentCount=0;
		}

		String documentName= "New Document " + newDocumentCount;
		Document doc = new Document(this,documentName,true);
		documents.add(doc);
		if(this.selected) doc.setClosed(false);
		newDocumentCount++;
		renamedNewDocumentCount++;
		registerChange();
		notifyObserver(this);
	}
	public void addDocument(String documentName) {
		Document doc = new Document(this,documentName,false);
		documents.add(doc);
		if(this.selected) doc.setClosed(false);
		registerChange();
		notifyObserver(this);
	}

	public void removeProject() {
		erased=true;
		parentNode.removeProject(this);
		registerChange();
		notifyObserver(this);
	}

	protected void removeDocument(Document doc) {
		
		if(doc==null)
			return;
		if(documents.isEmpty())
			return;
		if(!documents.contains(doc))
			return;
		
		documents.remove(doc);
		registerChange();
		notifyObserver(this);

	}

	public void renameProject(String name) {
		this.name=name;
		if(newProjectStatus) {
			this.newProjectStatus=false;
			parentNode.reduceRenamedNewProjectCount();
		}
		registerChange();
		notifyObserver(this);
	}

	public void select() {
		this.parentNode.updateSelected(this);
	}

	public void setSelected(boolean selected) {
		for(Document d:documents)
			d.setClosed(!selected);
		this.selected=selected;
		notifyObserver(this);
	}

	public void reduceRenamedNewDocumentCount() {
		renamedNewDocumentCount--;
		registerChange();
	}
	public void closeAll() {
		for(Document d:documents)
			d.setClosed(true);
	}

	public boolean getSelected() {
		return selected;
	}

	@Override
	public TreeNode getChildAt(int childIndex) {

		if(documents.isEmpty())
			return null;
		if(childIndex < 0)
			return null;
		if(documents.size() < childIndex)
			return null;

		return documents.get(childIndex);
	}

	@Override
	public int getChildCount() {

		return documents.size();
	}

	@Override
	public TreeNode getParent() {

		return parentNode;
	}

	@Override
	public int getIndex(TreeNode node) {

		if(node instanceof Document)
			if(documents.contains(node))
				return documents.indexOf((Document)node);

		return -1;
	}

	@Override
	public boolean getAllowsChildren() {

		return true;
	}

	@Override
	public boolean isLeaf() {

		return false;
	}

	@Override
	public Enumeration<Document> children() {

		if(documents.isEmpty())
			return null;
		return Collections.enumeration(documents);
	}

	@Override
	public void addObserver(IOListener listener) {

		if(listener == null)
			return;
		if(listeners == null)
			listeners = new ArrayList<IOListener>();
		if(listeners.contains(listener))
			return;
		listeners.add(listener);

	}

	@Override
	public void removeObserver(IOListener listener) {

		if(listener == null)
			return;
		if(!listeners.contains(listener))
			return;
		listeners.remove(listener);

	}

	@Override
	public void notifyObserver(Object event) {

		if(event == null)
			return;
		registerChange();
		if(listeners == null)
			return;

		ArrayList<IOListener> temporaryListeners = new ArrayList<IOListener>();
		for(IOListener listener:listeners) temporaryListeners.add(listener);
		for(IOListener listener:temporaryListeners) {
			listener.update(event);
		}
	}

	@Override
	public String toString() {
		return this.name;
	}

	public boolean getErased() {
		return erased;
	}

	public File getProjectFile() {
		return projectFile;
	}

	public void setProjectFile(File projectFile) {
		this.projectFile = projectFile;
	}
	
	public void registerChange() {
		this.changed=true;
		parentNode.registerChange();
	}
	
	public boolean isChanged() {
		return changed;
	}
	
	public void setChanged(boolean changed) {
		this.changed=changed;
	}
	
	
	private Object readResolve(){
		 listeners = new ArrayList<IOListener>();
		 return this;
	}
}
