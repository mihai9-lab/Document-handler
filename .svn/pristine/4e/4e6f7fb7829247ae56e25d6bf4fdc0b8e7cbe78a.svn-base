package serialization;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import directory.browser.DirectoryBrowser;
import directory.browser.IDirectoryBrowser;
import error_handling.ExceptionHandler;
import tree.model.ITreeNodeSerialization;
import tree.model.Workspace;

public class NodeSerialization implements ISerialization {

	IDirectoryBrowser dirBrowser;
	
	public void save(ITreeNodeSerialization node) {
		
		
		if(!node.isChanged()) 
			return;
		File f=node.getLocation();
		if(f == null) {
			
			dirBrowser = new DirectoryBrowser();
			f = dirBrowser.getSaveLocation(node);
			if(f==null)
				return;
			node.setLoaction(f);
		}
		
		
		ObjectOutputStream outStream=null;
		try {
			outStream = new ObjectOutputStream(new FileOutputStream(f));
			outStream.writeObject(node);
			node.setChanged(false);
			outStream.close();
		}
		catch (FileNotFoundException e) {
			gui.Frame.getInstance().getExceptionHandler().handleException("invalid_file");
		} 
		catch (IOException e) {
			gui.Frame.getInstance().getExceptionHandler().handleException("invalid_file");
		}

	}

	@SuppressWarnings("resource")
	public ITreeNodeSerialization open() {
		dirBrowser = new DirectoryBrowser();
		
		File f = dirBrowser.getOpenLocation();
		if(f==null)
			return null;
		
		ObjectInputStream inStream;
		ITreeNodeSerialization node=null;
		
		try {
			inStream = new ObjectInputStream(new FileInputStream(f));
			node = (ITreeNodeSerialization) inStream.readObject();
			inStream.close();
			return node;
		}
		catch (IOException e) {
			gui.Frame.getInstance().getExceptionHandler().handleException("invalid_file");
		}
		catch (ClassNotFoundException e) {
			gui.Frame.getInstance().getExceptionHandler().handleException("invalid_file");
		}
		return null;
	}
	
	public Workspace openWorkspace() {
		dirBrowser = new DirectoryBrowser();
		
		File f = dirBrowser.getWorkspaceLocation();
		if(f==null)
			return null;
		
		ObjectInputStream inStream;
		Workspace ws=null;
		
		try {
			inStream = new ObjectInputStream(new FileInputStream(f));
			ws = (Workspace) inStream.readObject();
			inStream.close();
			return ws;
		} 
		catch (IOException e) {
			gui.Frame.getInstance().getExceptionHandler().handleException("invalid_file");
		} 
		catch (ClassNotFoundException e) {
			gui.Frame.getInstance().getExceptionHandler().handleException("invalid_file");
		}
		return null;
	}
}
