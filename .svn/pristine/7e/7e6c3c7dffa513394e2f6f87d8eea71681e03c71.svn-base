package tree.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Enumeration;

import javax.swing.tree.TreeNode;

import observer.interfaces.IOListener;
import observer.interfaces.IObserver;

public class Page implements TreeNode,IObserver,Serializable{

	transient private ArrayList<IOListener> listeners;
	
	private String name;
	private Document parentNode;
	private boolean newPageStatus;
	private boolean erased;
	
	public Page(Document parentNode, String name, boolean status) {
		erased=false;
		this.parentNode=parentNode;
		this.name=name;
		this.newPageStatus=status;
	}
	
	
	public void removePage() {
		erased=true;
		parentNode.removePage(this);
	}
	
	public void renamePage(String name) {
		this.name=name;
		if(newPageStatus) {
			newPageStatus=false;
			parentNode.reduceRenamedNewPageCount();
		}
		notifyObserver(this);
	}
	
	@Override
	public TreeNode getChildAt(int childIndex) {
		
		return null;
	}

	@Override
	public int getChildCount() {
		return 0;
	}

	@Override
	public TreeNode getParent() {
		
		return parentNode;
	}

	@Override
	public int getIndex(TreeNode node) {
		return -1;
	}

	@Override
	public boolean getAllowsChildren() {
		return false;
	}
	public boolean getErased() {
		return erased;
	}

	@Override
	public boolean isLeaf() {
		return true;
	}

	@Override
	public Enumeration<? extends TreeNode> children() {
		return null;
	}

	@Override
	public void addObserver(IOListener listener) {
		
		if(listener == null)
			return;
		if(listeners == null)
			listeners = new ArrayList<IOListener>();
		if(listeners.contains(listener))
			return;
		listeners.add(listener);
		
	}

	@Override
	public void removeObserver(IOListener listener) {
		
		if(listener == null)
			return;
		if(!listeners.contains(listener))
			return;
		listeners.remove(listener);
		
	}

	@Override
	public void notifyObserver(Object event) {
		
		if(event == null)
			return;
		if(listeners == null)
			return;
		
		ArrayList<IOListener> temporaryListeners = new ArrayList<IOListener>();
		for(IOListener listener:listeners) temporaryListeners.add(listener);
		for(IOListener listener:temporaryListeners) {
			listener.update(event);
		}
	}
	@Override
	public String toString() {
		return this.name;
	}
}
