package clipboard;

import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.Transferable;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import javax.swing.SwingUtilities;
import javax.swing.tree.TreeNode;

import gui.Frame;
import tree.model.Page;
import tree.model.Project;
import tree.model.Workspace;

public class ClipboardManager implements IClipboard {

	private Clipboard clipboard;
	
	public ClipboardManager() {
		clipboard = new Clipboard("GeRuDokCB");
	}
	@Override
	public void cut() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void copy() {
		Page p = Frame.getInstance().getProjectView().getOpenedPage();
		
		if(p != null && p.getPageSelectedSlots().hasElements()) {
			
		}
		
		else {
			TreeNode node = (TreeNode)Frame.getInstance().getWorkspaceTree().getLastSelectedPathComponent();
			
			if(node instanceof Workspace)
				return;
			else if(node instanceof Project) {
				clipboard.setContents((Transferable)node, this);
			}
		}
		this.paste();
	}

	@Override
	public void paste() {
		Transferable content = clipboard.getContents(null);
		
		if(content instanceof Project)
			System.out.println("yeee");
		
		Project p = (Project)deepCopy(content);
		((Workspace)Frame.getInstance().getWorkspaceTree().getModel().getRoot()).add(p);
		SwingUtilities.updateComponentTreeUI(gui.Frame.getInstance().getWorkspaceTree());
	}
	
	
	@Override
	public void lostOwnership(Clipboard clipboard, Transferable contents) {
		System.out.println("lost ownership");
		
	}

	 private static Object deepCopy(Object object) {
		   try {
		     ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		     ObjectOutputStream outputStrm = new ObjectOutputStream(outputStream);
		     outputStrm.writeObject(object);
		     ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());
		     ObjectInputStream objInputStream = new ObjectInputStream(inputStream);
		     return objInputStream.readObject();
		   }
		   catch (Exception e) {
		     e.printStackTrace();
		     return null;
		   }
		 }
}
