package tree.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;

import javax.swing.tree.TreeNode;

import observer.interfaces.IOListener;
import observer.interfaces.IObserver;

public class Document implements TreeNode,IObserver{
	
	private ArrayList<IOListener> listeners;
	
	private ArrayList<Page> pages;
	private String name;
	private Project parentNode;
	private boolean newDocumentStatus;
	
	public Document(Project parentNode, String name, boolean status) {
		this.pages = new ArrayList<Page>();
		this.parentNode = parentNode;
		this.name = name;
		this.newDocumentStatus = status;
	}
	
	public boolean getNewDocumentStatus() {
		return newDocumentStatus;
	}
	
	
	@Override
	public TreeNode getChildAt(int childIndex) {

		if(pages.isEmpty())
			return null;
		if(childIndex<0)
			return null;
		if(pages.size()<childIndex)
			return null;
		
		return pages.get(childIndex);
	}

	@Override
	public int getChildCount() {
		
		return pages.size();
	}

	@Override
	public TreeNode getParent() {
		
		return parentNode;
	}

	@Override
	public int getIndex(TreeNode node) {
		
		if(node instanceof Page)
			if(pages.contains(node))
				return pages.indexOf((Page)node);
	}

	@Override
	public boolean getAllowsChildren() {
		
		return true;
	}

	@Override
	public boolean isLeaf() {
		
		return false;
	}

	@Override
	public Enumeration<? extends TreeNode> children() {

		if(pages.isEmpty())
			return null;
		return Collections.enumeration(pages);
	}

	@Override
	public void addObserver(IOListener listener) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void removeObserver(IOListener listener) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notifyObserver(Object event) {
		// TODO Auto-generated method stub
		
	}

}
